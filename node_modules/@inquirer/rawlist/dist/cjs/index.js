"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@inquirer/core");
const chalk_1 = __importDefault(require("chalk"));
const numberRegex = /[0-9]+/;
exports.default = (0, core_1.createPrompt)((config, done) => {
    const { choices } = config;
    const [status, setStatus] = (0, core_1.useState)('pending');
    const [value, setValue] = (0, core_1.useState)('');
    const [errorMsg, setError] = (0, core_1.useState)(undefined);
    const prefix = (0, core_1.usePrefix)();
    (0, core_1.useKeypress)((key, rl) => {
        if ((0, core_1.isEnterKey)(key)) {
            let selectedChoice;
            if (numberRegex.test(value)) {
                const answer = parseInt(value, 10) - 1;
                selectedChoice = choices[answer];
            }
            else {
                const answer = value.toLowerCase();
                selectedChoice = choices.find(({ key }) => key === answer);
            }
            if (selectedChoice) {
                const finalValue = selectedChoice.value || selectedChoice.name;
                setValue(finalValue);
                setStatus('done');
                done(finalValue);
            }
            else if (value === '') {
                setError('Please input a value');
            }
            else {
                setError(`"${chalk_1.default.red(value)}" isn't an available option`);
            }
        }
        else {
            setValue(rl.line);
            setError(undefined);
        }
    });
    const message = chalk_1.default.bold(config.message);
    if (status === 'done') {
        return `${prefix} ${message} ${chalk_1.default.cyan(value)}`;
    }
    const choicesStr = choices
        .map((choice, index) => {
        const humanIndex = index + 1;
        const line = `  ${choice.key || humanIndex}) ${choice.name || choice.value}`;
        if (choice.key === value.toLowerCase() || String(humanIndex) === value) {
            return chalk_1.default.cyan(line);
        }
        return line;
    })
        .join('\n');
    let error = '';
    if (errorMsg) {
        error = chalk_1.default.red(`> ${errorMsg}`);
    }
    return [
        `${prefix} ${message} ${value}`,
        [choicesStr, error].filter(Boolean).join('\n'),
    ];
});
